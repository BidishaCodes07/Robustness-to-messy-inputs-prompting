# -*- coding: utf-8 -*-
"""script_noise.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nz5OzWg_ZKQHNpA7gwwBW_cX1SyR9PJE
"""

import re
import random
import csv

def typo_noise(text, level='light'):
    keyboard_adjacent = {
        'a': ['s', 'q', 'z'], 'b': ['v', 'g', 'n'], 'c': ['x', 'v', 'd'],
        'd': ['s', 'f', 'e'], 'e': ['w', 'r', 'd'], 'f': ['d', 'g', 'r'],
        'g': ['f', 'h', 't'], 'h': ['g', 'j', 'y'], 'i': ['u', 'o', 'k'],
        'j': ['h', 'k', 'u'], 'k': ['j', 'l', 'i'], 'l': ['k', 'o'],
        'm': ['n', 'j', 'k'], 'n': ['b', 'm', 'h'], 'o': ['i', 'p', 'l'],
        'p': ['o', 'l'], 'q': ['w', 'a'], 'r': ['e', 't', 'f'],
        's': ['a', 'd', 'w'], 't': ['r', 'y', 'g'], 'u': ['y', 'i', 'j'],
        'v': ['c', 'b', 'f'], 'w': ['q', 'e', 's'], 'x': ['z', 'c', 'd'],
        'y': ['t', 'u', 'h'], 'z': ['x', 'a', 's']
    }
    degree_typos = 1 if level == 'light' else 3
    chars = list(text)
    positions = random.sample(range(len(chars)), degree_typos)
    for pos in positions:
        c = chars[pos].lower()
        if c in keyboard_adjacent:
            chars[pos] = random.choice(keyboard_adjacent[c])
    return ''.join(chars)

def spacing_punct_noise(text, level='light'):
    n_changes = 1 if level == 'light' else 2
    chars = list(text)
    for _ in range(n_changes):
        action = random.choice(['add_space', 'remove_punct'])
        if action == 'add_space':
            pos = random.randint(1, len(chars)-2)
            chars.insert(pos, ' ')
        else:  # remove punctuation
            puncts = [i for i, c in enumerate(chars) if c in ',.?']
            if puncts:
                pos = random.choice(puncts)
                chars.pop(pos)
    return ''.join(chars)

def emoji_noise(text, level='light'):
    emojis = ['üòä', 'üôÇ', 'ü§î', 'üòê', 'üò∂', 'üòç', 'üò≠']
    n_emoji = 1 if level == 'light' else 2
    chars = list(text)
    for _ in range(n_emoji):
        pos = random.randint(0, len(chars))
        chars.insert(pos, random.choice(emojis))
    return ''.join(chars)

#clean prompts
with open('data/clean_prompts.csv', 'r', encoding='utf-8') as infile:
    reader = csv.DictReader(infile)
    clean_data = list(reader)

#noisy output
with open('data/noisy_prompts.csv', 'w', newline='', encoding='utf-8') as outfile:
    fieldnames = ['id', 'noise_type', 'noise_level', 'prompt_in', 'gold_answer']
    writer = csv.DictWriter(outfile, fieldnames=fieldnames)
    writer.writeheader()
    for row in clean_data:
        for noise_type, func in [('typo', typo_noise), ('spacing_punct', spacing_punct_noise), ('emoji', emoji_noise)]:
            for level in ['light', 'heavy']:
                noisy_prompt = func(row['question'], level)
                writer.writerow({
                    'id': row['id'],
                    'noise_type': noise_type,
                    'noise_level': level,
                    'prompt_in': noisy_prompt,
                    'gold_answer': row['gold_answer']
                })

